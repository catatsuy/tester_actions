name: Release Go Project
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Test code
      run: go test -v .

  setup-release:
    name: Setup release
    needs: test # This workflow is executed after completed 'test' job
    runs-on: ubuntu-latest
    steps:
    - name: Create release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  release-pkg:
    name: Release package
    needs: setup-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [mac64, linux64]
        include:
        - os: mac64
          goos: darwin
          arch: amd64
        - os: linux64
          goos: linux
          arch: amd64

    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Build
      env:
        goos: ${{ matrix.goos }}
        goarch: ${{ matrix.arch }}
        tag: ${{ github.ref }}
      run: |
        GOOS=$goos GOARCH=$goarch make release version=$tag

    - name: Upload release asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_url.outputs.upload_url }}
        asset_path: release.tar.gz
        asset_name: release-${{ matrix.os }}.tar.gz
        asset_content_type: application/gzip
